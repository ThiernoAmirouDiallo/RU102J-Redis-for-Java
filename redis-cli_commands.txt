Redis-commands
    docker run -d --name redis-lab -p:8888:8888 redisuniversity/ru101-lab
    docker run -d --name redis_ru102j -p:6380:6379 redislabs/redistimeseries --loadmodule /usr/lib/redis/modules/redistimeseries.so --appendonly yes
    # docker run -d --name redis-lab-102j -p:8888:8888 -p:8081:8081 redisuniversity/ru102j-lab
    docker run --name redis -d -p 6379:6379 redis redis-server --requirepass "SUPER_SECRET_PASSWORD"
    docker exec -it redis_ru102j redis-cli
    docker run -it --rm redis redis-cli -h 192.168.0.8|host.docker.internal
    docker run -it --rm redis redis-cli -h host.docker.internal -p 6379 -a SUPER_SECRET_PASSWORD
    redis://user:password@host:port/dbnum
      redis-cli -u redis://LJenkins:p%40ssw0rd@redis-16379.hosted.com:16379/0 PING
    localhost:8888/entry.html

    Redis-cli commands
      KEYS
        dbsize # number of keys
        set user:1000:fname thierno EX 10 # 10s expiration time
        set user:1000:lname diallo PX 10000 # 10.000 ms expiration time
        set user:1000:lname diallo NX # set only if key does not exit
        set user:1000:lname diallo XX # set only if key exits
        get user:1000:fname
        exists user:1000:fname
        KEYS user:1000:*  # blocks db: not for prod
        SCAN 0 MATCH user:1000:* [COUNT 10000]
        DEL key user:1000:lname # blocks
        UNLINK key user:1000:fname
        TTL user:1000:fname # remaing time to expire in seconds
        PTTL user:1000:lname # remaing time to expire in milliseconds
        PERSIST user:1000:fname # remove expiration
        EXPIRE user:1000:fname 10 # expire in 10s
        PEXPIRE user:1000:fname 10 # expire in 10 ms
        EXPIREAT key unix-time-seconds [NX | XX | GT | LT]
        PEXPIREAT key unix-time-milliseconds [NX | XX | GT | LT]

      STRINGS
        INCR user:1000:pwdErrorCount # set 1 if key does not exist
        INCRBY user:1000:pwdErrorCount 2
        DECR user:1000:pwdErrorCount
        DECRBY user:1000:pwdErrorCount 2
        TYPE user:1000:pwdErrorCount
        OBJECT encoding user:1000:pwdErrorCount # internal incoding of a key value

      HASHES (Maps/dictionaries)
        HSET player:42 name thierno race black level 4 hp 20 gold 20
        HMSET player:43 name thierno race black level 4 hp 20 gold 20
        HGETALL player:42
        HGET player:42 name
        HMGET player:42 name status " get multiple fields values
        HEXISTS player:42 name
        HSET player:42 status dazed
        HSETNX player:42 status dazed # set if the key does not exist
        HDEL player:42 status
        HINCRBY player:42 gold 10
        HINCRBYFLOAT player:42 gold 10
        HSCAN player:42 0 MATCH *e*
        HKEYS player:42
        HVALS player:42
        EXPIRE player:42 100
        HLEN player:42 # size

      LIST
        RPUSH playlist 71
        RPUSH playlist 53 45 32
        LPOP playlist
        LPUSH playlist 20
        RPOP playlist
        LLEN playlist
        LRANGE playlist 0 2
        LRANGE playlist 0 -1 # from start to end
        LRANGE playlist:1 -4 -2 # from 4th position from end to 2nd from end
        LINDEX playlist:2 1
        LINSERT playlist:2 BEFORE 56 33
        LINSERT playlist:2 AFTER 56 44
        LSET playlist:2 3 66
        LREM playlist:2 1 60 # remove value 60 one time
        LTRIM playlist:3 0 3 # keep element from index 0 to 3
        llen playlist:3

      SET
        SADD users:game:1 thierno
        SMEMBERS users:game:1:friends # print content
        SCARD users:game:1 # size
        SISMEMBER users:game:1 thierno # is in the set
        SREM users:game:1:friends amadou # remove from set
        SSCAN users:game:1:friends 0 MATCH *
        SPOP users:game:1:friends # remove a random element
        SPOP users:game:1:friends 2 # remove 2 random element
        SDIFF users:game:1 users:game:1:friends # minus
        SINTER users:game:1 users:game:1:friends # intersection
        SUNION users:game:1 users:game:1:friends # union
        scard users:game:1 # size/cardinality

      SORTED SET
        ZADD leaders:exp 0 42
        ZINCRBY leaders:exp 120 42
        zadd testsocre +inf A
        ZRANGE leaders:exp 0 4 WITHSCORE # order by score asc
        ZREVRANGE leaders:exp 0 4 WITHSCORES # order by score desc
        ZRANK leaders:exp 42
        ZREVRANK leaders:exp 42
        ZSCORE leaders:exp 42
        ZCOUNT leaders:exp 0 10 # element with score from 0 to 10
        ZRANGEBYSCORE leaders:exp 10 20 WITHSCORES
        ZRANGEBYLEX leaders:exp - + # print all elements from -INF to +INF
        ZRANGEBYLEX leaders:exp (12 [85 # from 12 exclusive to 85 inclusive
        ZREM leaders:exp 41
        ZREMRANGEBYSCORE leaders:exp 12 25
        zrangebyscore hw1-8 (3 (6 WITHSCORES
        zrangebyscore hw1-8 (3 +inf WITHSCORES
        ZREMRANGEBYLEX leaders:exp [12 [15
        ZREMRANGEBYRANK leaders:exp 1 -5
        zcard hw1-8 # size/cardinality
        zpopmin slist-2
        zpopmax slist-2
        zinterstore sintersection 2 slist-2 slist-3 aggregate sum
        zinterstore sintersection 2 slist-2 a-non-sorted-set weights 2 1 aggregate sum
        zunionstore sunion 2 slist-2 slist-3 weights 2 1 aggregate sum
        ZDIFF
          Redis 6.2 introduced the ZDIFF
          For previous versions use:
            ZADD all 1 one 2 two 3 three
            SADD disabled two # this is the created intersection set
            ZUNIONSTORE tmp 2 all disabled WEIGHTS 1 0 AGGREGATE MIN
            ZREVRANGEBYSCORE tmp +inf 1 WITHSCORES

      TRANSACTION
        MULTI # to start a transaction: this will queue and batch commands later
        EXEC # execute all queued commands atomically/TRANSACTION
        DISCARD # Abort a transaction

      OPTIMISTIC LOCKING
        MULTI
        watch event:signups # exec will abort a transaction (nil is returned by EXEC) if a watched key before MULTI was modified by another client
        unwatch # if exec succeeds all keys are unwatched automitically

      BIT DATA
         setbit player:42:map1 9 1
         getbit player:42:map1 90
         bitcount player:42:map1
         bitcount player:42:map1 1 2 # BYTE offset 1 to 2 instead of BIT like all other commands
         bitfield mykey set u8 0 42 # set 8 bits unsigned int 42 at offset 0
         bitfield mykey get u8 0
         bitfield mykey incrby u8 0 1
         bitpos mykey 1 0 -1
         bitfield mybfByPosition set u8 #2 10 # set unsigned 8 bits length 10 to offset 2*8
         bitfield mybfByPosition get u8 #2
         bitfield mybfByPosition get u8 #2 get u8 16
          1) (integer) 10
          2) (integer) 10
         BIT OPERATIONS
          bitfield mykey2 set u8 0 2
          bitfield mykey4 set u8 0 4
          bitop OR mykey6 mykey2 mykey4
          bitfield mykey6 get u8 0
            1) (integer) 6

      PUB / SUB
           subscribe ch-1
           subscribe ch-1 ch-2
           publish ch-1 hello
           publish ch-1 hello # print number of active channels
           PSUBSCRIBE ch? # pattern subscribe
           PUBSUB numsub ch1 ch2 # print number of subscribers excluding pattern subscribers
           PUBSUB numpat # print number of pattern subscribers

      STREAMS
        xadd test:stream1 * siteId 1 tempC 18.0
        xrevrange test:stream1 + - count 10

      TIME SERIES
        TS.CREATE particulate-sensor:2 RETENTION 604800000 CHUNK_SIZE 16192 DUPLICATE_POLICY LAST LABELS location house zone back zipcode H4C2N4
        TS.ALTER particulate-sensor:1 RETENTION 604800000 CHUNK_SIZE 16192 DUPLICATE_POLICY LAST
        TS.ADD particulate-sensor:1 * 5 # * uses redis current timestamp
        TS.ADD particulate-sensor:1 1668519943530 6
        TS.RANGE particulate-sensor:1 - + FILTER_BY_VALUE 6 48
        TS.REVRANGE particulate-sensor:1 - + FILTER_BY_VALUE 6 48 # reverse range
        TS.RANGE particulate-sensor:1 1668519943530 1668520187443
        TS.RANGE particulate-sensor:1 - + AGGREGATION sum 500 # sum over 500 milliseconds interval
        TS.RANGE particulate-sensor:1 - + AGGREGATION min 500 # min over 500 milliseconds interval
        TS.RANGE particulate-sensor:1 - + AGGREGATION max 500 # max over 500 milliseconds interval
        TS.RANGE particulate-sensor:1 - + AGGREGATION avg 500 # avg over 500 milliseconds interval
        TS.CREATERULE particulate-sensor:1:avg:10 particulate-sensor:1 AGGREGATION avg 600000
        TS.QUERYINDEX location=house

      GEOSPECIAL DATA
          GEOADD fouta:attractions -122.2345673 40.9876543 mity
          GEOADD fouta:attractions -122.3345673 40.8876543 centreville -122.2395 40.91 sily
          zrange fouta:attractions 0 -1 WITHSCORES # geo data is stored in a sorted set with the score being the computed geohash of longitude and latitude
          GEOHASH fouta:attractions sily # 11 chars representation of the hash value that can be reduced from right to left with a lost of precistion of the original position
          geopos fouta:attractions sily
          zrem fouta:attractions sily
          GEODIST fouta:attractions centreville sily km
          GEORADIUS fouta:attractions -122.239 40.90 20 km
          GEORADIUS fouta:attractions -122.239 40.90 20 km WITHDIST WITHCOORD ASC COUNT 2
          GEORADIUSBYMEMBER fouta:attractions sily 6 mi WITHDIST WITHCOORD WITHHASH ASC count 2
          GEORADIUS fouta:attractions -122.239 40.90 20 km STORE searchres2 STOREDIST resByDist2
          GEORADIUSBYMEMBER fouta:attractions sily 6 mi ASC count 2 STORE searchres STOREDIST resByDist
          zunionstore geo:event:combined 2 geo:events:Football geo:events:Softball aggregate min

      COMMANDS MONITORING / LOGS
        MONITOR

      LUA SCRIPTING
        HSET names fname thierno lname diallo
        EVAL "return redis.call('HGET', KEYS[1], ARGV[1])" 1 names fname
        eval "return 42" 0
        eval "return {'3.13'}" 0 # to preserve decimal part
        set pival 3.14
        eval "return redis.call('GET', KEYS[1]) " 1 pival # preserves decimal
        set int-key 42
        eval "local val = redis.call('GET', KEYS[1]) return val" 1 int-key
        EVAL "return redis.call('HMGET', KEYS[1], ARGV[1], ARGV[2])" 1 names fname lname # returns an array
        EVAL "return redis.call('HSCAN', KEYS[1], ARGV[1])" 1 names 0 # returns a table
        EVAL "return {{KEYS[1]}, {ARGV[1], ARGV[2]}}" 1 names thierno diallo # construct response manually

        MANAGING SCRIPTS
          SCRIPT LOAD "return redis.call('HGET', KEYS[1], ARGV[1])"
            "4688a0f6e1e971a14e2d596031751f0590d37a92"
          EVALSHA 4688a0f6e1e971a14e2d596031751f0590d37a92 1 names fname
            "thierno"
          EVALSHA 4688a0f6e1e971a14e2d596031751f0590d37a92 1 names lname
            "diallo"
          SCRIPT EXISTS 4688a0f6e1e971a14e2d596031751f0590d37a92
          SCRIPT FLUSH # remove all cached SCRIPTS
          SCRIPT KILL # kill currently running script
          SCRIPT DEBUG YES|SYNC|NO
          SHUTDOWN NOSAVE|SAVE

        MULTI LINES SCRIPT
          LUA_SCRIPT=`cat <<!
          -- convert args to numbers
          local val1 = redis.call('GET', KEYS[1])
          local val2 = redis.call('GET', KEYS[2])

          if ARGV[1] == "sum" then
            return val1 + val2
          elseif ARGV[1] == "max" then
            return math.max(val1, val2)
          else
            return nil
          end
          !
          `
          redis-cli eval "$LUA_SCRIPT" 2 int-key int-key2 max

          redis-cli SCRIPT LOAD "$LUA_SCRIPT"
          evalsha f8d636269925a802a88e86140509a04791ec7b84 2 int-key int-key2 sum
